{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","Title","type","id","homedena","Linkdena","role","onClick","clickSwitch","htmlFor","changeText","TextForm","useState","copyButton","changeButton","text","setText","style","color","heading","rows","value","onChange","event","target","backgroundColor","length","alert","toUpperCase","functionToggle","toLowerCase","word","prompt","search","box","document","getElementById","select","console","log","navigator","clipboard","writeText","split","filter","element","defaultProps","Alert","alertShow","typ","charAt","slice","msg","About","mystyle","changeMyStyle","buttan","App","modee","setmodee","textChange","settextChange","setalert","showAlert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.eeddb225.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.Title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.homedena}</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.Linkdena}</Link>\r\n        </li>\r\n      </ul>\r\n       <div className=\"form-check form-switch\">\r\n       <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.clickSwitch}/>\r\n       <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\" >{props.changeText}</label>\r\n       </div>\r\n    </div>\r\n   </div>\r\n</nav>\r\n</>\r\n    )\r\n}\r\nNavbar.propTypes={\r\n    Title:PropTypes.string.isRequired,\r\n    homedena:PropTypes.string.isRequired,\r\n}\r\nNavbar.defaultProps={\r\n    Title:\"Set title here\",\r\n    homedena:\"write home here\",\r\n    Linkdena:\"Link dai n yaar\", \r\n};\r\n// htmlfor=\"flexSwitchCheckDefault\" \r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    // onclick function for converting the text to upper case \r\n    const handleUpClick=()=>{\r\n        if(text.length===0)\r\n           alert(\"Write something in text box to see changes\");\r\n        else\r\n        {\r\n        setText(text.toUpperCase());\r\n        props.functionToggle(\"converted to uppercase\",\"success\");\r\n        }\r\n    }\r\n    // onclick function for converting the text to Lower case\r\n    const handleLoClick=()=>{\r\n        if(text.length===0)\r\n           alert(\"Write something in text box to see changes\");\r\n        else\r\n        {\r\n        setText(text.toLowerCase());\r\n        props.functionToggle(\"converted to Lowercase\",\"success\");\r\n        }\r\n    }\r\n    //clear the text\r\n    const Clear=()=>{\r\n       if(text.length===0)\r\n        alert(\"Write something in text box to see changes\");\r\n       else\r\n       {\r\n       setText(\"\");\r\n       props.functionToggle(\"Text cleared\",\"success\");\r\n       }\r\n    }\r\n    //capturing the event from user \r\n    const handleUpChange=(event)=>{\r\n        setText(event.target.value);\r\n        // console.log(event.target.value);\r\n    }\r\n    //Searching the word\r\n    const searchWord=()=>{\r\n        if(text.length===0)\r\n        alert(\"Are you mad text is empty\");\r\n        else\r\n         {\r\n        let word=prompt(\"Enter the word you want to search\");\r\n         if(word===null)\r\n           alert(\"No problem for cancelations\");\r\n         else\r\n          {\r\n        let ans=text.search(word);\r\n        if(ans!==-1)\r\n          alert(\"Word found\");\r\n        else\r\n          alert(\"Not found\");\r\n          }\r\n         }\r\n    }\r\n    //copy text button\r\n    const [copyButton,changeButton]=useState(\"Copy text\");\r\n    //copy the whole text area\r\n    const [text,setText]=useState(\"This is defualt text\");\r\n    const copy=()=>{\r\n        if(text.length===0)\r\n        alert(\"Write something in text box to see changes\");\r\n        else\r\n        {\r\n        changeButton(\"Text copied\");\r\n        const box=document.getElementById(\"area\");\r\n        box.select();\r\n        console.log(navigator.clipboard.writeText(box.value));\r\n        props.functionToggle(\"Text copied\",\"success\");\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n       <div className=\"mb-3 my-3\">\r\n       <label htmlFor=\"area\" className=\"form-label\" style={{color:props.mode===\"light\"?\"black\":\"white\"}}>{props.heading}</label>\r\n       <textarea className=\"form-control\" id=\"area\" rows=\"8\" value={text} onChange={handleUpChange} style={{backgroundColor:props.mode===\"light\"?\"white\":\"grey\",color:props.mode===\"light\"?\"black\":\"white\"}}></textarea>\r\n       </div>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-1 my-2`} onClick={handleUpClick}>Convert to upper case</button>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-1 my-2`} onClick={handleLoClick}>Convert to lower case</button>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-2 my-2`} onClick={Clear}>Clear</button>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-1 my-2`} onClick={searchWord}>search any word</button>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-2 my-2`} onClick={copy}>{copyButton}</button>\r\n\r\n       <div className=\"conatiner my-3\" style={{color:props.mode===\"light\"?\"black\":\"white\"}}>\r\n           <h2>Your text summary</h2>\r\n           <p>Total words are {text.split(\" \").filter((element)=>{return  element.length!==0}).length}</p>\r\n           <p>Total characters are {text.length}</p>\r\n           <p>Time taken to read the document is {0.008*text.split(\" \").length} Minutes</p>\r\n           <h2>Preview</h2>\r\n           <p>{text.length>0?text:\"Enter the text to preview\"}</p>\r\n       </div>\r\n       </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const captilizeFirstLetter=(word)=>{\r\n        return word.charAt(0).toUpperCase()+word.slice(1);\r\n    }\r\n    return (\r\n        props.alertShow &&  <div className={`alert alert-${props.alertShow.typ} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{captilizeFirstLetter(props.alertShow.typ)}:{props.alertShow.msg}</strong> \r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">  dismiss button diabled beacuse of settime out*/} \r\n        {/* </button> */}\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [mystyle,changeMyStyle]=useState({\r\n        color:\"black\",\r\n        backgroundColor:\"white\"\r\n    })\r\n    const [buttan,changeButton]=useState(\"Enable dark mode\");\r\n    //capturing the click from user \r\n    const toggleStyle=()=>{\r\n        if(mystyle.color===\"black\")\r\n        {\r\n        changeMyStyle({\r\n            color:\"white\",\r\n            backgroundColor:\"black\"\r\n        })\r\n        changeButton(\"Enable white mode\");\r\n        }\r\n        else\r\n          {\r\n            changeMyStyle({\r\n                color:\"black\",\r\n                backgroundColor:\"white\"\r\n            })\r\n            changeButton(\"Enable black mode\");\r\n          }\r\n\r\n    } \r\n    return (\r\n    <div className=\"container my-5\" style={mystyle}>\r\n    <div className=\"accordion my-3\" id=\"accordionExample\">\r\n        <div className=\"accordion-item \">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button \" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={mystyle}>\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={mystyle}>\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={mystyle}>\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"container\">\r\n    <button className=\"btn btn-primary my-4\" onClick={toggleStyle}>{buttan}</button>\r\n    </div>\r\n    </div>\r\n    )\r\n}\r\n","// import About from './About';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nfunction App() {\n  const [modee, setmodee] = useState(\"light\");  //whether dark mode is enabled or not\n  const [textChange, settextChange] = useState(\"Enable dark mode\");\n  const [alert, setalert] = useState(null);\n  const showAlert=(message,type)=>{\n     setalert({\n       msg:message,\n       typ:type,\n     })\n    }\n    setTimeout(() => {\n        setalert(null);\n    }, 2000);\n  \n  const toggleColorChange=()=>{\n    if(modee===\"dark\")\n    {\n    setmodee(\"light\");\n    settextChange(\"Enable dark mode\");\n    document.body.style.backgroundColor=\"white\";\n    showAlert(\"You have disabled dark mode\",\"danger\");\n   }\n  else\n      {\n    setmodee(\"dark\");\n    settextChange(\"Disable dark mode\");\n    document.body.style.backgroundColor=\"#21236c\";\n    showAlert(\"You have enabled dark mode\",\"success\");\n      }\n    }\n  return (\n    <>\n    <Router>\n          <Navbar Title=\"Textutlis\" homedena=\"Home\" Linkdena=\"About\" mode={modee}  changeText={textChange} clickSwitch={toggleColorChange}/>\n          <Alert alertShow={alert} />\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n          <div className=\"container\">\n          <TextForm heading=\"Enter your text here \" mode={modee} functionToggle={showAlert}/>\n          </div>\n          </Route>\n        </Switch>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}