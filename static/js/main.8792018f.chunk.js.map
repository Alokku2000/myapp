{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","Title","type","id","homedena","Linkdena","role","onClick","clickSwitch","htmlFor","changeText","TextForm","useState","copyButton","changeButton","text","setText","style","color","heading","rows","value","onChange","event","target","console","log","backgroundColor","length","alert","toUpperCase","functionToggle","toLowerCase","word","prompt","search","box","document","getElementById","select","navigator","clipboard","writeText","split","defaultProps","Alert","alertShow","typ","charAt","slice","msg","App","modee","setmodee","textChange","settextChange","setalert","showAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8792018f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.Title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.homedena}</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">{props.Linkdena}</a>\r\n        </li>\r\n      </ul>\r\n      {/* <button type=\"button\" className=\"btn btn-warning\" onClick={props.clickmode}>{props.changemode}</button> */}\r\n       {/* <div className=\"colorPic\">\r\n         <label htmlFor=\"colorPick\" style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>{colorMode}</label>\r\n         <input type=\"color\" name=\"colorPicc\" id=\"colorpick\"  onInput={changeDocumentColor}/>\r\n       </div> */}\r\n       {/* <div className=\"form-check form-switch mx-3\">\r\n       <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.pinkChange}/>\r\n       <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\" >{props.pinkText}</label>\r\n       </div> */}\r\n       <div className=\"form-check form-switch\">\r\n       <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.clickSwitch}/>\r\n       <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\" >{props.changeText}</label>\r\n       </div>\r\n    </div>\r\n   </div>\r\n</nav>\r\n</>\r\n    )\r\n}\r\nNavbar.propTypes={\r\n    Title:PropTypes.string.isRequired,\r\n    homedena:PropTypes.string.isRequired,\r\n}\r\nNavbar.defaultProps={\r\n    Title:\"Set title here\",\r\n    homedena:\"write home here\",\r\n    Linkdena:\"Link dai n yaar\", \r\n};\r\n// htmlfor=\"flexSwitchCheckDefault\" \r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    // onclick function for converting the text to upper case \r\n    const handleUpClick=()=>{\r\n        if(text.length===0)\r\n           alert(\"Write something in text box to see changes\");\r\n        else\r\n        {\r\n        setText(text.toUpperCase());\r\n        props.functionToggle(\"converted to uppercase\",\"success\");\r\n        }\r\n    }\r\n    // onclick function for converting the text to Lower case\r\n    const handleLoClick=()=>{\r\n        if(text.length===0)\r\n           alert(\"Write something in text box to see changes\");\r\n        else\r\n        {\r\n        setText(text.toLowerCase());\r\n        props.functionToggle(\"converted to Lowercase\",\"success\");\r\n        }\r\n    }\r\n    //clear the text\r\n    const Clear=()=>{\r\n       if(text.length===0)\r\n        alert(\"Write something in text box to see changes\");\r\n       else\r\n       {\r\n       setText(\"\");\r\n       props.functionToggle(\"Text cleared\",\"success\");\r\n       }\r\n    }\r\n    //capturing the event from user \r\n    const handleUpChange=(event)=>{\r\n        setText(event.target.value);\r\n        // console.log(event.target.value);\r\n        console.log(text);\r\n    }\r\n    //Searching the word\r\n    const searchWord=()=>{\r\n        if(text.length===0)\r\n        alert(\"Are you mad text is empty\");\r\n        else\r\n         {\r\n        let word=prompt(\"Enter the word you want to search\");\r\n         if(word===null)\r\n           alert(\"No problem for cancelations\");\r\n         else\r\n          {\r\n        let ans=text.search(word);\r\n        if(ans!==-1)\r\n          alert(\"Word found\");\r\n        else\r\n          alert(\"Not found\");\r\n          }\r\n         }\r\n    }\r\n    //copy text button\r\n    const [copyButton,changeButton]=useState(\"Copy text\");\r\n    //copy the whole text area\r\n    const [text,setText]=useState(\"This is defualt text\");\r\n    const copy=()=>{\r\n        if(text.length===0)\r\n        alert(\"Write something in text box to see changes\");\r\n        else\r\n        {\r\n        changeButton(\"Text copied\");\r\n        const box=document.getElementById(\"area\");\r\n        box.select();\r\n        console.log(navigator.clipboard.writeText(box.value));\r\n        props.functionToggle(\"Text copied\",\"success\");\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n       <div className=\"mb-3 my-3\">\r\n       <label htmlFor=\"area\" className=\"form-label\" style={{color:props.mode===\"light\"?\"black\":\"white\"}}>{props.heading}</label>\r\n       <textarea className=\"form-control\" id=\"area\" rows=\"8\" value={text} onChange={handleUpChange} style={{backgroundColor:props.mode===\"light\"?\"white\":\"grey\",color:props.mode===\"light\"?\"black\":\"white\"}}></textarea>\r\n       </div>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-2`} onClick={handleUpClick}>Convert to upper case</button>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-3`} onClick={handleLoClick}>Convert to lower case</button>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-2`} onClick={Clear}>Clear</button>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-3`} onClick={searchWord}>search any word</button>\r\n       <button className={`btn btn-${props.mode===\"light\"?\"primary\":\"warning\"} mx-3`} onClick={copy}>{copyButton}</button>\r\n\r\n       <div className=\"conatiner my-3\" style={{color:props.mode===\"light\"?\"black\":\"white\"}}>\r\n           <h2>Your text summary</h2>\r\n           <p>Total words are {text.split(\" \").length}</p>\r\n           <p>Total characters are {text.length}</p>\r\n           <p>Time taken to read the document is {0.008*text.split(\" \").length} Minutes</p>\r\n           <h2>Preview</h2>\r\n           <p>{text.length>0?text:\"Enter the text to preview\"}</p>\r\n       </div>\r\n       </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const captilizeFirstLetter=(word)=>{\r\n        return word.charAt(0).toUpperCase()+word.slice(1);\r\n    }\r\n    return (\r\n        props.alertShow &&  <div className={`alert alert-${props.alertShow.typ} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{captilizeFirstLetter(props.alertShow.typ)}:{props.alertShow.msg}</strong> \r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">  dismiss button diabled beacuse of settime out*/} \r\n        {/* </button> */}\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import About from './About';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n// import About from './About';\nfunction App() {\n  const [modee, setmodee] = useState(\"light\");  //whether dark mode is enabled or not\n  const [textChange, settextChange] = useState(\"Enable dark mode\");\n  const [alert, setalert] = useState(null);\n  const showAlert=(message,type)=>{\n     setalert({\n       msg:message,\n       typ:type,\n     })\n    }\n    setTimeout(() => {\n        setalert(null);\n    }, 2000);\n  //  setInterval(() => {\n  //    document.title=\"😇downolad my app\";\n  //  }, 1500);\n  //  setInterval(() => {\n  //   document.title=\"🤪\";\n  // }, 2000);\n  \n  const toggleColorChange=()=>{\n    if(modee===\"dark\")\n    {\n    setmodee(\"light\");\n    settextChange(\"Enable dark mode\");\n    document.body.style.backgroundColor=\"white\";\n    showAlert(\"You have disabled dark mode\",\"danger\");\n   }\n  else\n      {\n    setmodee(\"dark\");\n    settextChange(\"Disable dark mode\");\n    document.body.style.backgroundColor=\"#21236c\";\n    showAlert(\"You have enabled dark mode\",\"success\");\n      }\n    }\n  return (\n    <>\n          <Navbar Title=\"Textutlis\" homedena=\"Home\" Linkdena=\"About\" mode={modee}  changeText={textChange} clickSwitch={toggleColorChange}/>\n          <Alert alertShow={alert} />\n          <div className=\"container\">\n          <TextForm heading=\"Enter your text here \" mode={modee} functionToggle={showAlert}/>\n          </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}